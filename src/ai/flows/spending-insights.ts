// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides AI-powered insights about spending patterns to help users identify savings opportunities.
 *
 * - `getSpendingInsights` - A function that analyzes spending data and returns insights.
 * - `SpendingInsightsInput` - The input type for the `getSpendingInsights` function.
 * - `SpendingInsightsOutput` - The return type for the `getSpendingInsights` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SpendingInsightsInputSchema = z.object({
  transactions: z.array(
    z.object({
      date: z.string().describe('The date of the transaction (ISO format).'),
      description: z.string().describe('A description of the transaction.'),
      amount: z.number().describe('The amount of the transaction.'),
      category: z.string().optional().describe('The category of the transaction.'),
    })
  ).describe('An array of transactions to analyze.'),
  income: z.number().describe('The user monthly income'),
});
export type SpendingInsightsInput = z.infer<typeof SpendingInsightsInputSchema>;

const SpendingInsightsOutputSchema = z.object({
  summary: z.string().describe('A summary of the user spending patterns.'),
  insights: z.array(
    z.object({
      category: z.string().describe('The category of spending.'),
      percentage: z.number().describe('The percentage of total spending in this category.'),
      trend: z.string().describe('The trend of spending in this category (e.g., increasing, decreasing, stable).'),
      recommendation: z.string().describe('A recommendation for how to save money in this category.'),
    })
  ).describe('An array of insights about the user spending.'),
});
export type SpendingInsightsOutput = z.infer<typeof SpendingInsightsOutputSchema>;

export async function getSpendingInsights(input: SpendingInsightsInput): Promise<SpendingInsightsOutput> {
  return spendingInsightsFlow(input);
}

const spendingInsightsPrompt = ai.definePrompt({
  name: 'spendingInsightsPrompt',
  input: {schema: SpendingInsightsInputSchema},
  output: {schema: SpendingInsightsOutputSchema},
  prompt: `You are a personal finance advisor. Analyze the user's spending transactions and provide insights to help them save money.

  Monthly Income: {{{income}}}

  Transactions:
  {{#each transactions}}
  - Date: {{date}}, Description: {{description}}, Amount: {{amount}}, Category: {{category}}
  {{/each}}

  Provide a summary of the user's spending patterns and identify areas where they can save money.  For each category, calculate what percentage of their total income that category represents, and include a recommendation on how to save money in that category.

  Pay close attention to what categories the user is spending in.  Make reasonable assumptions based on the data provided.  If there is no category, you will need to make an intelligent guess as to what category the transaction belongs to.  If a transaction is particularly large, call it out specifically.

  Ensure that the output is valid JSON matching the schema.
  `,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const spendingInsightsFlow = ai.defineFlow(
  {
    name: 'spendingInsightsFlow',
    inputSchema: SpendingInsightsInputSchema,
    outputSchema: SpendingInsightsOutputSchema,
  },
  async input => {
    const {output} = await spendingInsightsPrompt(input);
    return output!;
  }
);
