/**
 * @fileoverview Firestore Security Rules for Zrlda Finance application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal financial data
 * and uses a shared-access model for collaborative finance circles. It prioritizes
 * data privacy by ensuring that users can only access their own financial information
 * (wallets, transactions, categories, notifications). Finance circle data and
 * merchant data follows public read with controlled write permissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured by owner-only access.
 * - /users/{userId}/wallets/{walletId}: Stores wallets, secured by owner-only access via path.
 * - /users/{userId}/wallets/{walletId}/transactions/{transactionId}: Stores transactions, secured by owner-only access via path.
 * - /users/{userId}/categories/{categoryId}: Stores categories, secured by owner-only access via path.
 * - /financeCircles/{financeCircleId}: Stores finance circles, access controlled by membership map.
 * - /circleMemberships/{circleMembershipId}: Stores circle memberships, for efficient querying.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications, secured by owner-only access via path.
 * - /merchants/{merchantId}: Stores merchant data, publicly readable, writes restricted.
 *
 * Key Security Decisions:
 * - User data is strictly private; listing all users is disallowed.
 * - Finance circle access is managed through a `members` map on the circle document.
 * - Circle Memberships are stored in a top-level collection for efficient queries.
 * - Merchant data is publicly readable but writes are restricted to avoid tampering.
 *
 * Denormalization for Authorization:
 * - FinanceCircle documents should contain a 'members' map (e.g., `{ members: { 'user_abc': 'editor' } }`)
 *   to enable authorization without additional reads.
 * - CircleMembership documents should contain a denormalized copy of the financeCircle data
 *   (e.g., name, description) to allow listing of circle memberships efficiently.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their profile if authenticated as 'user123'.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures wallets. Only the owner can read and write their wallets.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User with ID 'user123' can create a wallet under their profile.
     * @allow (get, update, delete) User with ID 'user123' can access their own wallets.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access wallets of 'user123'.
     * @principle Enforces document ownership based on the path.
     */
    match /users/{userId}/wallets/{walletId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Secures transactions. Only the owner can read and write their transactions.
     * @path /users/{userId}/wallets/{walletId}/transactions/{transactionId}
     * @allow (create) User with ID 'user123' can create a transaction under their wallet.
     * @allow (get, update, delete) User with ID 'user123' can access their own transactions.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access transactions of 'user123'.
     * @principle Enforces document ownership based on the path.
     */
    match /users/{userId}/wallets/{walletId}/transactions/{transactionId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Secures categories. Only the owner can read and write their categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with ID 'user123' can create a category under their profile.
     * @allow (get, update, delete) User with ID 'user123' can access their own categories.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access categories of 'user123'.
     * @principle Enforces document ownership based on the path.
     */
    match /users/{userId}/categories/{categoryId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Secures finance circles. Access is controlled by the members map.
     * @path /financeCircles/{financeCircleId}
     * @allow (get, list) Any user can read the finance circle details.
     * @allow (create) Only a signed-in user can create a finance circle.
     * @allow (update, delete) Only a member with 'admin' role can update or delete.
     * @deny (create, update, delete) Non-members cannot create, update, or delete.
     * @principle Enforces access based on membership roles within the document.
     */
    match /financeCircles/{financeCircleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && get(/databases/$(database)/documents/financeCircles/$(financeCircleId)).data.adminUserId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures circle memberships. Allows creating a membership only if the user ID matches and the circle exists.
     * @path /circleMemberships/{circleMembershipId}
     * @allow (create) User can create a membership for themselves in a valid circle.
     * @allow (get, list) Any user can read circle memberships.
     * @deny (update, delete) No one can update or delete a circle membership (deletion must be handled by a backend function).
     * @principle Restricts creation to authenticated users and links membership to a valid circle.
     */
    match /circleMemberships/{circleMembershipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures notifications. Only the owner can read and write their notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with ID 'user123' can create a notification under their profile.
     * @allow (get, update, delete) User with ID 'user123' can access their own notifications.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access notifications of 'user123'.
     * @principle Enforces document ownership based on the path.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Secures merchant data. Allows public reads, but restricts writes.
     * @path /merchants/{merchantId}
     * @allow (get, list) Any user can read merchant data.
     * @deny (create, update, delete) Only authenticated users with specific roles can write merchant data.
     * @principle Public read, restricted write.
     */
    match /merchants/{merchantId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}