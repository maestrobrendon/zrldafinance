/**
 * @fileoverview Firestore Security Rules for Zrlda Finance application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal financial data (wallets, transactions, categories, notifications),
 * and a shared-access model for collaborative finance circles. Top-level collections (financeCircles, circleMemberships, merchants) 
 * facilitate scalable queries and authorization independence.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/wallets/{walletId}: Wallets owned by a specific user.
 * - /users/{userId}/wallets/{walletId}/transactions/{transactionId}: Transactions for a specific wallet.
 * - /users/{userId}/categories/{categoryId}: Expense categories for a specific user.
 * - /financeCircles/{financeCircleId}: Finance circle documents, with a `members` map for storing user roles (e.g., 'admin', 'member').
 * - /circleMemberships/{circleMembershipId}: Circle membership documents, linking users to finance circles.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a specific user.
 * - /merchants/{merchantId}: Merchant data for transaction categorization (no ownership enforced).
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the authenticated user.
 * - Finance circles use a `members` map for managing access, enabling collaborative features.
 * - Circle memberships are stored in a top-level collection for efficient querying and authorization independence.
 * - Merchant data is publicly readable.
 *
 * Denormalization for Authorization:
 * - FinanceCircle documents contain a `members` map: members: { 'user_abc': 'editor' }. This allows rules to check user roles directly on the document.
 * - CircleMembership documents denormalize data from FinanceCircle (e.g., name, description) to allow listing of circle memberships without extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get) Signed-in user can get their own profile.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @deny (create) User attempts to create a profile with a mismatched user ID.
     * @deny (get) User attempts to get another user's profile.
     * @deny (update) User attempts to update another user's profile.
     * @deny (delete) User attempts to delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for wallets.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) Signed-in user can create a wallet under their profile.
     * @allow (get) Signed-in user can get a wallet under their profile.
     * @allow (update) Signed-in user can update a wallet under their profile.
     * @allow (delete) Signed-in user can delete a wallet under their profile.
     * @deny (create) User attempts to create a wallet under another user's profile.
     * @deny (get) User attempts to get a wallet under another user's profile.
     * @deny (update) User attempts to update a wallet under another user's profile.
     * @deny (delete) User attempts to delete a wallet under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for transactions within a wallet.
     * @path /users/{userId}/wallets/{walletId}/transactions/{transactionId}
     * @allow (create) Signed-in user can create a transaction under their wallet.
     * @allow (get) Signed-in user can get a transaction under their wallet.
     * @allow (update) Signed-in user can update a transaction under their wallet.
     * @allow (delete) Signed-in user can delete a transaction under their wallet.
     * @deny (create) User attempts to create a transaction under another user's wallet.
     * @deny (get) User attempts to get a transaction under another user's wallet.
     * @deny (update) User attempts to update a transaction under another user's wallet.
     * @deny (delete) User attempts to delete a transaction under another user's wallet.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) Signed-in user can create a category under their profile.
     * @allow (get) Signed-in user can get a category under their profile.
     * @allow (update) Signed-in user can update a category under their profile.
     * @allow (delete) Signed-in user can delete a category under their profile.
     * @deny (create) User attempts to create a category under another user's profile.
     * @deny (get) User attempts to get a category under another user's profile.
     * @deny (update) User attempts to update a category under another user's profile.
     * @deny (delete) User attempts to delete a category under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to finance circle documents based on membership.
     * @path /financeCircles/{financeCircleId}
     * @allow (create) Admin user can create a new finance circle.
     * @allow (get) Members can read finance circle data.
     * @allow (list) No listing.
     * @allow (update) Admin user can update finance circle data.
     * @allow (delete) Admin user can delete finance circle data.
     * @deny (create) Non-admin attempts to create a finance circle.
     * @deny (get) Non-members attempt to read circle data.
     * @deny (update) Non-admin attempts to update circle data.
     * @deny (delete) Non-admin attempts to delete circle data.
     * @principle Enforces shared access via membership list, restricts management to admin.
     */
    match /financeCircles/{financeCircleId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
          return isSignedIn() && resource.data.adminUserId == request.auth.uid;
      }
      function isMember() {
        return isSignedIn() && resource.data.members[request.auth.uid] != null;
      }
      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }
      allow get: if isMember();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.adminUserId == request.auth.uid;
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages circle membership documents, enabling efficient member lookups.
     * @path /circleMemberships/{circleMembershipId}
     * @allow (create) Any signed-in user.
     * @allow (get) Any signed-in user.
     * @allow (list) Any signed-in user.
     * @allow (update) No updates allowed.
     * @allow (delete) Only the user who owns the membership.
     * @deny   (delete) Cannot delete if not the owner.
     * @principle Facilitates efficient member lookups without hierarchical dependencies
     */
    match /circleMemberships/{circleMembershipId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCircleMember(){
            return isSignedIn() && request.auth.uid == resource.data.userId;
        }
        function isExistingCircleMember() {
          return isCircleMember() && resource != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if isExistingCircleMember();
    }

    /**
     * @description Enforces user-ownership for notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) Signed-in user can create a notification under their profile.
     * @allow (get) Signed-in user can get a notification under their profile.
     * @allow (update) Signed-in user can update a notification under their profile.
     * @allow (delete) Signed-in user can delete a notification under their profile.
     * @deny (create) User attempts to create a notification under another user's profile.
     * @deny (get) User attempts to get a notification under another user's profile.
     * @deny (update) User attempts to update a notification under another user's profile.
     * @deny (delete) User attempts to delete a notification under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to merchant data.
     * @path /merchants/{merchantId}
     * @allow (get) Any user can read merchant data.
     * @allow (list) Any user can list merchant data.
     * @deny (create) No writes allowed.
     * @deny (update) No writes allowed.
     * @deny (delete) No writes allowed.
     * @principle Public read access with no writes.
     */
    match /merchants/{merchantId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}